import { useEffect, useRef, useState } from "react";
import axios from "../../../utils/axios.js";
import styled from "styled-components";
import CreateRoom from "./CreateRoom";
import Header from "../../../components/Header";
import Footer from "../../../components/Footer";
import { useNavigate } from "react-router-dom";

const RoomList = () => {
  const [user, setUser] = useState(null); // Ïú†Ï†Ä Ï†ïÎ≥¥ ÏÉÅÌÉú Í¥ÄÎ¶¨
  const [modal, setModal] = useState(false); // Î∞© ÎßåÎì§Í∏∞ Î™®Îã¨ ÏÉÅÌÉú Í¥ÄÎ¶¨
  const [roomLists, setRoomLists] = useState([]); // Í≤åÏûÑÎ∞© Î¶¨Ïä§Ìä∏ ÏÉÅÌÉú Í¥ÄÎ¶¨
  const navigate = useNavigate();

  // Î°úÍ∑∏Ïù∏Ìïú Ïú†Ï†Ä Î≤àÌò∏ (UserNum) Í∞ÄÏ†∏Ïò§Í∏∞
  const [userInfo, setUserInfo] = useState();
  console.log("Î°úÍ∑∏Ïù∏ Ïú†Ï†Ä Ï†ïÎ≥¥ ? ", userInfo);
  useEffect(() => {
    const getUserInfo = async () => {
      // Î°úÍ∑∏Ïù∏Ìïú Ïú†Ï†Ä Ï†ïÎ≥¥ Î∞õÏïÑÏò¥ (Ïó¨Í∏∞ÏÑúÎäî Ïú†Ï†Ä Ïù¥Î©îÏùºÎßå ÌôïÏù∏ Í∞ÄÎä•)
      await axios
        .get(`/api/user/me`)
        .then((res) => {
          // Í∞ÄÏ†∏Ïò® Ïú†Ï†Ä Ïù¥Î©îÏùºÎ°ú Ïú†Ï†Ä Ï†ïÎ≥¥Î•º Îã§Ïãú Ï°∞ÌöåÌï¥ÏÑú state Ïóê Ï†ÄÏû•
          let email = res.data.claims.userEmail;
          axios
            .get(`api/user/game/selectUser/${email}`)
            .then((res) => {
              setUserInfo(res.data);
            })
            .catch((error) => console.log(error));
        })
        .catch((error) => {
          console.log(error);
        });
    };

    getUserInfo();
  }, []);

  // userGradeÏóê Îî∞Îùº ÏÑ†ÌÉùÌï† Ïàò ÏûàÎäî Ï±ÑÎÑêÏù¥ Îã¨ÎùºÏßê
  const channelList = ["Bronze", "Silver", "Gold"];
  const channelKR = ["Î∏åÎ°†Ï¶à Ï±ÑÎÑê", "Ïã§Î≤Ñ Ï±ÑÎÑê", "Í≥®Îìú Ï±ÑÎÑê"];

  // Î∞© ÎßåÎì§Í∏∞ Î™®Îã¨ ÏºúÍ≥† ÎÅÑÎäî Î©îÏÑúÎìú
  const createRoom = () => {
    if (user) {
      setModal(!modal);
    } else {
      console.log("User info is not yet loaded.");
    }
  };

  // Í≤åÏûÑÎ∞© Î¶¨Ïä§Ìä∏ Î∂àÎü¨Ïò§Í∏∞
  const [selectChannel, setSelectChannel] = useState(); //Ïú†Ï†ÄÍ∞Ä Í≥†Î•∏ Ï±ÑÎÑê Ï†ïÎ≥¥ Ï†ÄÏû•
  const [rerend, setRerend] = useState(false); //ÏÉàÎ°úÍ≥†Ïπ®ÏùÑ ÏúÑÌïú Î≥ÄÏàò

  const getGameRooms = (channel) => {
    // ÏÑ†ÌÉùÌïú Ï±ÑÎÑêÏùÑ Ïä§ÌÖåÏù¥Ìä∏ Î≥ÄÏàòÏóê ÏÑ∏ÌåÖ
    setSelectChannel(channel);
    // Î™®Ïò§Îì† Î∞© Ï†ïÎ≥¥ Î∞õÏïÑÏò§Ïûê~
    axios
      .get(`/api/user/game/selectAllRoom`)
      .then((res) => {
        console.log("Î∞© Î¶¨Ïä§Ìä∏ Î∞õÏïÑÏò®Í±∞ ÌôïÏù∏! ", res.data);
        setRoomLists([res.data]);
        console.log("roomLists : ", roomLists[0]);
      })
      .catch((error) => {
        console.log(error);
      });
  };

  // Ïú†Ï†Ä Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§Îäî Ìï®Ïàò
  const fetchUserInfo = () => {
    axios
      .get("/api/user/get-profile")
      .then((res) => {
        console.log("Fetched user info: ", res.data);
        setUser(res.data); // Ïú†Ï†Ä Ï†ïÎ≥¥Î•º ÏÉÅÌÉúÏóê Ï†ÄÏû•
      })
      .catch((error) => {
        console.log("Failed to fetch user info:", error);
      });
  };

  useEffect(() => {
    getGameRooms();
    fetchUserInfo(); // Ïú†Ï†Ä Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
  }, []);
  // Í≤åÏûÑÎ∞© ÌÅ¥Î¶≠ÌïòÎ©¥ Ìï¥Îãπ Í≤åÏûÑÎ∞©ÏúºÎ°ú Ïù¥Îèô (Í≤åÏûÑÎ∞© Ïù∏Ïõê +1)
  const goWaitingRoom = (item) => {
    console.log("item >>> ", item);
    // Î∞©Ïóê Îì§Ïñ¥Í∞ÄÎ©¥ Ïù∏ÏõêÏàòÎ•º Ï¶ùÍ∞ÄÏãúÌÇ§Ïûê !
    axios
      .post(`/api/user/game/updateCount/${item.gameRoomId}`)
      .then(() => {
        console.log("Ïù∏ÏõêÏàò Ï¶ùÍ∞Ä ÏôÑÎ£å ~");
        navigate(`/roomwait/${item.gameRoomId}`);
      })
      .catch((error) => console.log(error));
  };

  // Í≥µÏßÄÏÇ¨Ìï≠ Î∂àÎü¨Ïò§Í∏∞ (notice ÏµúÏã†Í∏Ä 10Í∞úÍπåÏßÄÎßå Ï∂úÎ†•)
  const [notice, setNotice] = useState();
  useEffect(() => {
    getNoticeList();
  }, []);

  const getNoticeList = () => {
    axios
      .get(`/api/board`)
      .then((res) => {
        console.log("Í≥µÏßÄÏÇ¨Ìï≠ ! ", res.data);
        setNotice(res.data.content);
      })
      .catch((error) => {
        console.log(error);
      });
  };

  // üîÑ Î≤ÑÌäº ÎàÑÎ•¥Î©¥ Í≤åÏûÑÎ∞© ÏÉàÎ°úÍ≥†Ïπ®
  useEffect(() => {
    if (rerend === true) {
      getGameRooms(selectChannel);
      setRerend(false);
    }
  }, [rerend]);

  return (
    <>
      <Header />
      <RoomBody>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <ChannelList className="nes-container is-rounded">
            <div className="nes-container with-title is-centered">
              <p className="title">Ï±ÑÎÑê ÏÑ†ÌÉù</p>
              <ChanelButton
                className="nes-btn is-primary"
                onClick={() => getGameRooms("free")}
              >
                ÏûêÏú† Ï±ÑÎÑê
              </ChanelButton>
              {userInfo === undefined
                ? null
                : channelList.map((item, index) => {
                    let active = "";
                    {
                      userInfo.userGrade === item
                        ? (active = "nes-btn is-primary")
                        : (active = "nes-btn is-disabled");
                    }
                    let param = "";
                    if (active === "nes-btn is-primary") {
                      param = channelList[index];
                    }
                    return (
                      <ChanelButton
                        className={active}
                        key={index}
                        onClick={() => getGameRooms(param)}
                      >
                        {channelKR[index]}
                      </ChanelButton>
                    );
                  })}
            </div>
            <ChanelButton className="nes-btn" onClick={createRoom}>
              Î∞© ÎßåÎì§Í∏∞
            </ChanelButton>
            <section className="icon-list text-center m-5">
              <i className="nes-logo"></i>
              <i className="nes-octocat animate"></i>
            </section>
          </ChannelList>
          <div className="grid grid-rows-2 gap-4">
            <div className="nes-container is-rounded bg-white">
              <div className="p-2"> * Í≥µÏßÄÏÇ¨Ìï≠</div>
              <Uldiv className="nes-list is-disc">
                {notice === undefined
                  ? null
                  : notice.map((item, index) => {
                      return (
                        <GameList
                          key={index}
                          onClick={() => navigate(`/board/detail/${item.bcId}`)}
                        >
                          [{item.bcCode}] {item.title}
                        </GameList>
                      );
                    })}
              </Uldiv>
            </div>
            <div className="nes-container is-rounded bg-white">
              <div className="p-2 flex justify-between">
                <p> * Í≤åÏûÑÎ∞©</p>
                {roomLists.length > 0 && roomLists[0] ? (
                  <button onClick={() => setRerend(true)}> üîÑ </button>
                ) : null}
              </div>
              <Uldiv className="nes-list is-circle">
                {/* Ïú†Ï†ÄÍ∞Ä ÌÅ¥Î¶≠Ìïú Ï±ÑÎÑêÏùò Î∞©Îßå Î≥¥Ïù¥ÎèÑÎ°ù ÌïÑÌÑ∞ÎßÅ ÌõÑ Ï∂úÎ†•ÌïòÍ∏∞ */}
                {roomLists.length > 0 && roomLists[0] ? (
                  roomLists[0]
                    .filter((el) => {
                      console.log(selectChannel);
                      console.log(
                        "Î∞© Ï†ïÎ≥¥ == ÏÑ†ÌÉù Ï±ÑÎÑê ÏùºÏπò Ïó¨Î∂Ä : ",
                        el.tier === selectChannel
                      );
                      return el.tier === selectChannel;
                    })
                    .filter((el) => {
                      // Î∞©Ïù¥ Îã§ Ï∞ºÏúºÎ©¥ Î¶¨Ïä§Ìä∏Ïóê Ïïà ÎùÑÏõÄ
                      let participants = el.players;
                      let total = el.players + el.bots;
                      return participants !== total;
                    })
                    .map((item, index) => (
                      <GameList key={index} onClick={() => goWaitingRoom(item)}>
                        [{item.tier}] ({item.players}/{item.players + item.bots}
                        )&nbsp;
                        {item.roomName}
                      </GameList>
                    ))
                ) : (
                  <BeforeList>‚ÜñÔ∏è Ï±ÑÎÑêÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî</BeforeList>
                )}
              </Uldiv>
            </div>
          </div>
          {modal ? <CreateRoom func={createRoom} user={userInfo} /> : null}
        </div>
      </RoomBody>
      <Footer />
    </>
  );
};

const RoomBody = styled.div`
  width: 100vw;
  margin: 20px auto;
`;

const ChannelList = styled.div`
  background-color: white;
  width: 300px;
`;

const ChanelButton = styled.button`
  width: 100%;
  margin-top: 40px;
`;

const Uldiv = styled.ul`
  height: 25vh;
  overflow-y: auto;
  overflow-x: hidden;
`;

const GameList = styled.li`
  &:hover {
    background-color: #cccccc;
    border: 1px dashed black;
  }
`;

const BeforeList = styled.div`
  width: 100%;
  height: 20vh;
  background-color: #cccccc;
  border-radius: 20px;
  font-weight: bold;
  display: flex;
  justify-content: center;
  align-items: center;
`;

export default RoomList;
